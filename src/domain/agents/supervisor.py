from langchain_openai import ChatOpenAI
from langgraph.prebuilt import create_react_agent
from src.domain.agents.graph import graph_agent
from src.domain.agents.topic_model import tm_agent
from dotenv import load_dotenv
from pydantic import SecretStr
import os

load_dotenv()

api_key_str = os.getenv("OPENAI_API_KEY")
if not api_key_str:
    raise ValueError("Missing OpenAI API Key. Set OPENAI_API_KEY in your environment.")

openai_api_key = SecretStr(api_key_str)  # Convert to SecretStr

model = ChatOpenAI(api_key=openai_api_key)

tools = [graph_agent, tm_agent]

supervisor = create_react_agent(model, tools)

def run_supervisor(query: str):
    """
    Executes the supervisor agent with the given user query.

    Args:
        query (str): The input prompt to process.

    Returns:
        dict: The structured response generated by the supervisor agent.
    """
    try:
        print("Running supervisor agent...", flush=True)
        response = supervisor.invoke({"input": query})
        print("Supervisor response:", response, flush=True)
        return response
    except Exception as e:
        return {"error": str(e)}